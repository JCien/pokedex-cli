package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

type cliCommand struct {
	name        string
	description string
	callback    func() error
}

func getCommands() map[string]cliCommand {
	return map[string]cliCommand{
		"help": {
			name:        "help",
			description: "Displays a help message",
			callback:    commandHelp,
		},
		"exit": {
			name:        "exit",
			description: "Exit the Pokedex",
			callback:    commandExit,
		},
	}
}

func startRepl() {
	// Blocks the code and waits for input,
	// once the user types something and presses enter,
	// the code continues and the input is available in the returned scanner.
	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Print("Pokedex > ")
		scanner.Scan()
		// Text returns the most recent token generated by a call to
		// Scanner.Scan as a newly allocated string holding its bytes.
		input := cleanInput(scanner.Text())
		if len(input) == 0 {
			continue
		}

		usrInput := input[0]

		command, exists := getCommands()[usrInput]
		if exists {
			err := command.callback()
			if err != nil {
				fmt.Println(err)
			}
			continue
		} else {
			fmt.Printf("Unknown command: %v\n", usrInput)
			continue
		}
	}
}

func cleanInput(text string) []string {
	lower := strings.ToLower(text)
	clean := strings.Fields(lower)
	return clean
}

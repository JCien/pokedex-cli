package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/JCien/pokedex-cli/internal/pokedexapi"
)

type cliCommand struct {
	name        string
	description string
	callback    func(*config, ...string) error
}

type config struct {
	pokeapiClient    pokedexapi.Client
	nextLocationsURL *string
	prevLocationsURL *string
	caughtPokemon    map[string]pokedexapi.PokemonInfo
}

func getCommands() map[string]cliCommand {
	return map[string]cliCommand{
		"help": {
			name:        "help",
			description: "Displays a help message",
			callback:    commandHelp,
		},
		"exit": {
			name:        "exit",
			description: "Exit the Pokedex",
			callback:    commandExit,
		},
		"map": {
			name:        "map",
			description: "Displays the next 20 locations",
			callback:    commandMapf,
		},
		"mapb": {
			name:        "mapb",
			description: "Displays the previous 20 locations",
			callback:    commandMapb,
		},
		"explore": {
			name:        "explore <location_name>",
			description: "Lists Pokemon in the location",
			callback:    commandExplore,
		},
		"catch": {
			name:        "catch <pokemon_name>",
			description: "Attempts to catch the named pokemon",
			callback:    commandCatch,
		},
		"inspect": {
			name:        "inspect <pokemon_name>",
			description: "Displays info on caught Pokemon",
			callback:    commandInspect,
		},
	}
}

func startRepl(cfg *config) {
	// Blocks the code and waits for input,
	// once the user types something and presses enter,
	// the code continues and the input is available in the returned scanner.
	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Print("Pokedex > ")
		scanner.Scan()
		// Text returns the most recent token generated by a call to
		// Scanner.Scan as a newly allocated string holding its bytes.
		input := cleanInput(scanner.Text())
		if len(input) == 0 {
			continue
		}

		usrInput := input[0]

		args := []string{}
		if len(input) > 1 {
			args = input[1:]
		}

		command, exists := getCommands()[usrInput]
		if exists {
			err := command.callback(cfg, args...)
			if err != nil {
				fmt.Println(err)
			}
			continue
		} else {
			fmt.Printf("Unknown command: %v\n", usrInput)
			continue
		}
	}
}

func cleanInput(text string) []string {
	lower := strings.ToLower(text)
	clean := strings.Fields(lower)
	return clean
}
